def findPermutation(s):
    n = len(s)
    perm = []
    start, end = 0, n

    for char in s:
        if char == 'I':
            perm.append(start)
            start += 1
        else:  # char == 'D'
            perm.append(end)
            end -= 1

    perm.append(start)  # or perm.append(end)

    return perm


def searchMatrix(matrix, target):
    m, n = len(matrix), len(matrix[0])
    left, right = 0, m * n - 1

    while left <= right:
        mid = (left + right) // 2
        row = mid // n
        col = mid % n

        if target == matrix[row][col]:
            return True
        elif target < matrix[row][col]:
            right = mid - 1
        else:
            left = mid + 1

    return False


def validMountainArray(arr):
    n = len(arr)
    if n < 3:
        return False

    left, right = 0, n - 1

    while left < right:
        if arr[left] >= arr[left+1] or arr[right] >= arr[right-1]:
            return False

        if arr[left] < arr[left+1]:
            left += 1

        if arr[right] < arr[right-1]:
            right -= 1

    return left == right


def findMaxLength(nums):
    max_length = 0
    count = 0
    sum_count = {0: -1}

    for i in range(len(nums)):
        if nums[i] == 1:
            count += 1
        else:
            count -= 1

        if count in sum_count:
            length = i - sum_count[count]
            max_length = max(max_length, length)
        else:
            sum_count[count] = i

    return max_length


def minProductSum(nums1, nums2):
    nums1.sort()
    nums2.sort(reverse=True)
    min_product_sum = 0

    for i in range(len(nums1)):
        min_product_sum += nums1[i] * nums2[i]

    return min_product_sum



def findOriginalArray(changed):
    if len(changed) % 2 != 0:
        return []

    freq = {}
    original = []

    for num in changed:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1

    for num in changed:
        if num == 0:
            if freq.get(num, 0) % 2 != 0:
                return []
        else:
            double_num = num * 2
            if freq.get(double_num, 0) == 0:
                return []
            freq[double_num] -= 1
            original.append(num)

    return original


def generateMatrix(n):
    matrix = [[0] * n for _ in range(n)]
    value = 1
    top, bottom, left, right = 0, n - 1, 0, n - 1

    while value <= n * n:
        for i in range(left, right + 1):
            matrix[top][i] = value
            value += 1
        top += 1

        for i in range(top, bottom + 1):
            matrix[i][right] = value
            value += 1
        right -= 1

        for i in range(right, left - 1, -1):
            matrix[bottom][i] = value
            value += 1
        bottom -= 1

        for i in range(bottom, top - 1, -1):
            matrix[i][left] = value
            value += 1
        left += 1

    return matrix


def multiply(mat1, mat2):
    m, k, n = len(mat1), len(mat1[0]), len(mat2[0])
    result = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(n):
            dot_product = 0
            for x in range(k):
                dot_product += mat1[i][x] * mat2[x][j]
            result[i][j] = dot_product

    return result

