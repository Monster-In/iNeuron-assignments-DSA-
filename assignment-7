def isIsomorphic(s, t):
    if len(s) != len(t):
        return False

    s_map = {}
    t_map = {}

    for s_char, t_char in zip(s, t):
        if s_char in s_map:
            if s_map[s_char] != t_char:
                return False
        elif t_char in t_map:
            if t_map[t_char] != s_char:
                return False
        else:
            s_map[s_char] = t_char
            t_map[t_char] = s_char

    return True



def isStrobogrammatic(num):
    mapping = {
        '0': '0',
        '1': '1',
        '6': '9',
        '8': '8',
        '9': '6'
    }
    left, right = 0, len(num) - 1

    while left <= right:
        left_char = num[left]
        right_char = num[right]

        if left_char not in mapping or right_char not in mapping or mapping[left_char] != right_char:
            return False

        left += 1
        right -= 1

    return True



def addStrings(num1, num2):
    result = ""
    i = len(num1) - 1
    j = len(num2) - 1
    carry = 0

    while i >= 0 or j >= 0:
        sum_digits = carry

        if i >= 0:
            sum_digits += int(num1[i])
            i -= 1
        if j >= 0:
            sum_digits += int(num2[j])
            j -= 1

        result = str(sum_digits % 10) + result
        carry = sum_digits // 10

    if carry > 0:
        result = str(carry) + result

    return result


def reverseWords(s):
    words = s.split(" ")
    result = []

    for word in words:
        reversed_word = word[::-1]
        result.append(reversed_word)

    return " ".join(result)


def reverseStr(s, k):
    result = ""
    reverse = True

    for i in range(0, len(s), k):
        segment = s[i:i+k]

        if reverse:
            result += segment[::-1]
        else:
            result += segment

        reverse = not reverse

    return result



def rotateString(s, goal):
    if len(s) != len(goal):
        return False

    doubled = s + s

    if goal in doubled:
        return True
    else:
        return False




def remove_backspaces(s):
    stack = []

    for char in s:
        if char != '#':
            stack.append(char)
        elif stack:
            stack.pop()

    return ''.join(stack)

def backspaceCompare(s, t):
    processed_s = remove_backspaces(s)
    processed_t = remove_backspaces(t)

    return processed_s == processed_t



def checkStraightLine(coordinates):
    x1, y1 = coordinates[0]

    for i in range(1, len(coordinates)):
        x2, y2 = coordinates[i]
        if (x2 - x1) == 0:  # Avoid division by zero
            return False
        slope = (y2 - y1) / (x2 - x1)
        if slope != prev_slope and i > 1:
            return False
        prev_slope = slope

    return True
