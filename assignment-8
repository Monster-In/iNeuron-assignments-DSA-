def minimumDeleteSum(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize the first row
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])

    # Initialize the first column
    for i in range(1, m + 1):
        dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])

    # Fill the dp array
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))

    return dp[m][n]


def checkValidString(s):
    stack = []

    for c in s:
        if c == '(' or c == '*':
            stack.append(c)
        else:  # c is ')'
            if stack and stack[-1] == '(':
                stack.pop()
            else:
                stack.append(c)

    # Handle remaining '(' parentheses using '*'
    i = len(stack) - 1
    while i >= 0 and stack[i] == '(':
        stack.pop()
        i -= 1

    return len(stack) == 0


def minSteps(word1, word2):
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize the first row
    for j in range(n + 1):
        dp[0][j] = j

    # Initialize the first column
    for i in range(m + 1):
        dp[i][0] = i

    # Fill the dp array
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]




class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def buildTree(s):
    if not s:
        return None

    # Find the index of the first opening parenthesis
    i = s.find('(')
    if i == -1:
        # No opening parenthesis found, so the entire string represents a single node
        return TreeNode(int(s))

    # Create the root node
    root = TreeNode(int(s[:i]))

    # Find the index of the corresponding closing parenthesis
    j = findClosingParenthesis(s, i)

    # Recursively build the left and right subtrees
    root.left = buildTree(s[i + 1: j])
    root.right = buildTree(s[j + 2: -1])

    return root


def findClosingParenthesis(s, start):
    count = 0
    for i in range(start, len(s)):
        if s[i] == '(':
            count += 1
        elif s[i] == ')':
            count -= 1
            if count == 0:
                return i
    return -1


def compress(chars):
    write_idx = 0
    count = 0
    prev = None

    for c in chars:
        if c == prev:
            count += 1
        else:
            if count > 1:
                for digit in str(count):
                    chars[write_idx] = digit
                    write_idx += 1

            chars[write_idx] = c
            write_idx += 1
            count = 1
            prev = c

    if count > 1:
        for digit in str(count):
            chars[write_idx] = digit
            write_idx += 1

    return write_idx




from collections import Counter

def findAnagrams(s, p):
    p_freq = Counter(p)
    window_freq = Counter()

    left, right = 0, 0
    match_count = 0
    result = []

    while right < len(s):
        if s[right] in p_freq:
            window_freq[s[right]] += 1
            if window_freq[s[right]] == p_freq[s[right]]:
                match_count += 1

        if right - left + 1 == len(p):
            if match_count == len(p_freq):
                result.append(left)

            if s[left] in p_freq:
                if window_freq[s[left]] == p_freq[s[left]]:
                    match_count -= 1
                window_freq[s[left]] -= 1

            left += 1

        right += 1

    return result




def decodeString(s):
    stack = []

    for c in s:
        if c != ']':
            stack.append(c)
        else:
            encoded_str = ""
            while stack[-1] != '[':
                encoded_str += stack.pop()
            stack.pop()  # Pop '['

            k = ""
            while stack and stack[-1].isdigit():
                k += stack.pop()
            k = int(k[::-1])

            decoded_str = encoded_str[::-1] * k
            for char in decoded_str:
                stack.append(char)

    return ''.join(stack[::-1])




def canBeEqual(s, goal):
    diff_s = []
    diff_goal = []

    for i in range(len(s)):
        if s[i] != goal[i]:
            diff_s.append(i)
            diff_goal.append(i)

    if len(diff_s) != 2 or len(diff_goal) != 2:
        return False

    return s[diff_s[0]] == goal[diff_goal[1]] and s[diff_s[1]] == goal[diff_goal[0]]



