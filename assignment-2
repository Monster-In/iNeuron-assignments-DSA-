def array_pair_sum(nums):
    min_sum = 0
    nums.sort() 

    for i in range(0, len(nums), 2):
        min_sum += nums[i]

    return min_sum

nums = [1, 4, 3, 2]
max_sum = array_pair_sum(nums)
print(max_sum) 


def max_candies(candyType):
    max_types = len(set(candyType))
    max_allowed = len(candyType) // 2
    return min(max_types, max_allowed)

candyType = [1, 1, 2, 2, 3, 3]
max_types = max_candies(candyType)
print(max_types)  # Output: 3


def findLHS(nums):
    freq = {}
    max_length = 0

    # Count the frequency of each number
    for num in nums:
        freq[num] = freq.get(num, 0) + 1

    # Check if the current number and the number plus 1 form a harmonious subsequence
    for num in freq:
        if num + 1 in freq:
            length = freq[num] + freq[num + 1]
            max_length = max(max_length, length)

    return max_length

nums = [1, 3, 2, 2, 5, 2, 3, 7]
max_length = findLHS(nums)
print(max_length)  # Output: 5


def canPlaceFlowers(flowerbed, n):
    count = 0
    i = 0

    while i < len(flowerbed):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0):
            flowerbed[i] = 1
            count += 1
        i += 1

    return count >= n

flowerbed = [1, 0, 0, 0, 1]
n = 1
result = canPlaceFlowers(flowerbed, n)
print(result)  # Output: True


def maximumProduct(nums):
    nums.sort()
    n = len(nums)
    return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1])

# Test case
nums = [1, 2, 3]
max_product = maximumProduct(nums)
print(max_product)  # Output: 6


def search(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

nums = [-1, 0, 3, 5, 9, 12]
target = 9
index = search(nums, target)
print(index)  # Output: 4


def isMonotonic(nums):
    increasing = decreasing = True

    for i in range(1, len(nums)):
        if nums[i] < nums[i - 1]:
            increasing = False
        if nums[i] > nums[i - 1]:
            decreasing = False

    return increasing or decreasing

nums = [1, 2, 2, 3]
is_monotonic = isMonotonic(nums)
print(is_monotonic)  # Output: True


def minimumScore(nums, k):
    nums.sort()
    min_val = nums[0]
    max_val = nums[-1]
    
    min_score = max_val - min_val
    
    for i in range(1, len(nums) - 1):
        lower = min(min_val + k, nums[i] - k)
        upper = max(max_val - k, nums[i] + k)
        min_score = min(min_score, upper - lower)
    
    return min_score

nums = [1]
k = 0
min_score = minimumScore(nums, k)
print(min_score)  # Output: 0
